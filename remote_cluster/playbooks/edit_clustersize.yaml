- name: Start/Stop Kubernetes cluster using Kops
  hosts: localhost
  gather_facts: true
  vars:
    state_store: "s3://{{ s3name }}"
  vars_files:
    - variables.yaml
    - secret.yaml
  vars_prompt:
    - name: "cluster_name"
      prompt: "Enter the name of the cluster to start/stop"
      private: no
  tasks:
    - name: Set kops path for Linux
      set_fact:
        kops_path: "/usr/local/bin/kops"
      when: ansible_distribution == 'Fedora'
    - name: Set kops path for macOS
      set_fact:
        kops_path: "{{ '/opt/homebrew/bin/kops' if ansible_architecture == 'arm64' else '/usr/local/bin/kops' }}"
      when: ansible_distribution == 'MacOSX'

    - name: List all Kops clusters
      command: "{{ kops_path }} get clusters --state={{ state_store }} -o json"
      register: clusters_output
      changed_when: false

    - name: Validate selected cluster exists
      fail:
        msg: "The cluster name '{{ cluster_name }}' does not exist."
      when: cluster_name not in clusters_output.stdout

    - name: display cluster details
      debug:
        msg: "{{ clusters_output.stdout_lines }}"

    - name: Get Instance Group Names
      command: "{{ kops_path }} get ig --name {{ cluster_name }} -o json --state={{ state_store }}"
      register: ig_output_json
      changed_when: false

    - name: Parse Instance Group Names
      set_fact:
        instance_groups: "{{ ig_output_json.stdout | from_json | map(attribute='metadata.name') | list }}"

    - name: start/stop cluster by editing instance groups
      pause:
        prompt: "edit the file to set minsize/maxsize by running ---> {{ kops_path }} edit ig {{ item }} --name {{ cluster_name }} --state={{ state_store }} <---"
      loop: "{{ instance_groups }}"

    - name: Update cluster configuration
      command: "{{ kops_path }} update cluster {{ cluster_name }} --state={{ state_store }} --yes "

    - name: Perform rolling-update
      command: "{{ kops_path }} rolling-update cluster {{ cluster_name }}  --state={{ state_store }} --yes --cloudonly"
    
    - name: export the config file
      command: "{{ kops_path }} export --name {{ cluster_name }} kubecfg --admin --state s3://{{ s3name }} --kubeconfig /tmp/{{ cluster_name }}-aws.yaml"

    - name: Validate the cluster
      command: "{{ kops_path }} validate cluster --state={{ state_store }}"
      environment:
        KUBECONFIG: "/tmp/{{ cluster_name }}-aws.yaml"
      register: validate_output
      # ignore_errors: true
      retries: 60
      delay: 10
      until: "'is ready' in validate_output.stdout"

    - name: display validation status
      debug:
        msg: "{{ validate_output }}"
