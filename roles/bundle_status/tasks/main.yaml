---
- name: Get the assertion.json from S3
  amazon.aws.s3_object:
    endpoint_url: "https://s3.us-east-2.amazonaws.com"
    bucket: "{{ s3_bucket_name_for_results }}"
    object: "/{{ sre_agent_name__version_number }}/{{run_uuid}}/{{scenario_number}}/{{run_number}}/assertion.json"
    dest: "/tmp/assertion.json"
    mode: get
  register: s3_get_result
  retries: 3  # Number of retries
  delay: 60   # Delay between retries in seconds (60 seconds = 1 minute)
  until: s3_get_result is success  # Continue retrying until the task is successful
  tags:
    - bundle_status
  when:
    - sre_bench_runner
    - run_uuid is defined and scenario_number is defined and run_number is defined

- name: Read JSON file
  ansible.builtin.slurp:
    src: "/tmp/assertion.json"
  register: json_content
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Parse JSON content
  ansible.builtin.set_fact:
    json_data: "{{ json_content.content | b64decode | from_json }}"
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Get Deployed condition
  ansible.builtin.set_fact:
    deployed_condition: "{{ json_data.status.conditions | selectattr('type', 'equalto', 'Deployed') | list | first | default({}) }}"
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Check Deployment Status
  ansible.builtin.set_fact:
    deployment_status: >-
      {{
        {
          "status": (
            "True" if deployed_condition.status | default("") == true
            else "False"
          ),
          "reason": (
            "DeploymentReady" if deployed_condition.status | default("") == true
            else "DeploymentFailed" if deployed_condition.status | default("") == false
            else "DeploymentInProgress"
          ),
          "lastTransitionTime": deployed_condition.lastTransitionTime | default(ansible_date_time.iso8601)
        }
      }}
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Get FaultInjected condition
  ansible.builtin.set_fact:
    fault_injected_condition: "{{ json_data.status.conditions | selectattr('type', 'equalto', 'FaultInjected') | list | first | default({}) }}"
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Check FaultInjection Status
  ansible.builtin.set_fact:
    fault_injection_status: >-
      {{
        {
          "status": (
            "True" if fault_injected_condition.status | default("") == true
            else "False"
          ),
          "reason": (
            "FaultInjectionReady" if fault_injected_condition.status | default("") == true
            else "FaultInjectionFailed" if fault_injected_condition.status | default("") == false
            else "FaultInjectionInProgress" if deployed_condition.status | default("") == true
            else "DeploymentFailed" if deployed_condition.status | default("") == false
            else "DeploymentNotReady"
          ),
          "lastTransitionTime": fault_injected_condition.lastTransitionTime | default(deployment_status.lastTransitionTime)
        }
      }}
  when: sre_bench_runner
  tags:
    - bundle_status


- name: Get Destroyed condition
  ansible.builtin.set_fact:
    destroyed_condition: "{{ json_data.status.conditions | selectattr('type', 'equalto', 'Destroyed') | list | first | default({}) }}"
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Check Destroy Status
  ansible.builtin.set_fact:
    destroy_status: >-
      {{
        {
          "status": (
            "True" if destroyed_condition.status | default("") == true
            else "False"
          ),
          "reason": (
            "DestroyDone" if destroyed_condition.status | default("") == true
            else "DestroyFailed" if destroyed_condition.status | default("") == false
            else "DestroyInProgress" if fault_injected_condition.status | default("") == true
            else "FaultInjectionFailed" if fault_injected_condition.status | default("") == false
            else "FaultInjectionNotReady" 
          ),
          "lastTransitionTime": destroyed_condition.lastTransitionTime | default(fault_injection_status.lastTransitionTime)
        }
      }}
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Combine all statuses into a new JSON structure
  ansible.builtin.set_fact:
    combined_status: >-
      {{
        {
          "status": {
            "conditions": [
              {
                "type": "Deployed",
                "status": deployment_status.status,
                "reason": deployment_status.reason,
                "lastTransitionTime": deployment_status.lastTransitionTime
              },
              {
                "type": "FaultInjected",
                "status": fault_injection_status.status,
                "reason": fault_injection_status.reason,
                "lastTransitionTime": fault_injection_status.lastTransitionTime
              },
              {
                "type": "Destroyed",
                "status": destroy_status.status,
                "reason": destroy_status.reason,
                "lastTransitionTime": destroy_status.lastTransitionTime
              }
            ]
          }
        }
      }}
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Write the combined status to a new JSON file
  copy:
    content: "{{ combined_status | to_nice_json }}"
    dest: "{{ bundle_status_file }}"
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Display the combined status
  debug:
    var: "{{ combined_status | to_nice_json }}"
  when: sre_bench_runner
  tags:
    - bundle_status

- name: Upload the bundle status JSON to S3
  amazon.aws.s3_object:
    endpoint_url: "https://s3.us-east-2.amazonaws.com"
    bucket: "{{ s3_bucket_name_for_results }}"
    object: "/{{ sre_agent_name__version_number }}/{{run_uuid}}/{{scenario_number}}/{{run_number}}/bundle_status.json"
    src: "{{ bundle_status_file }}"
    mode: put
  tags:
    - bundle_status
  when:
    - sre_bench_runner
    - run_uuid is defined and scenario_number is defined and run_number is defined
