---
- name: Display the collected documentation
  debug:
    var: "injection_docs"
  tags:
    - injection_docs

- name: Validate the documentation content
  ansible.utils.validate:
    data: "{{ injection_docs | to_json }}"
    criteria: "{{ fault_injection_documentation_schema }}"
    engine: ansible.utils.jsonschema
  ignore_errors: true
  register: validation_result
  tags:
    - injection_docs

- name: Show validation results
  debug:
    msg: "Validated fault injection documentation schema for {{ injection_docs | map(attribute='id') | sort | join(', ') }}: {{ validation_result['msg'] }}"
  failed_when: "'errors' in validation_result"
  tags:
    - injection_docs

- name: Ensure IDs are unique
  assert:
    that: injection_ids == unique_injection_ids
    fail_msg: "Duplicate fault injection method ID in {{ injection_ids | sort }}"
    msg: "All fault injection method IDs are unique."
    quiet: yes
  vars:
    injection_ids: "{{ injection_docs | map(attribute='id') | sort | list }}"
    unique_injection_ids: "{{ injection_ids | unique | sort | list }}"
  tags:
    - injection_docs

- name: Ensure fault injection names are unique
  assert:
    that: injection_names == unique_injection_names
    fail_msg: "Duplicate fault injection method name in {{ injection_names | sort }}"
    msg: "All fault injection method names are unique."
    quiet: yes
  vars:
    injection_names: "{{ injection_docs | map(attribute='name') | sort | list }}"
    unique_injection_names: "{{ injection_names | unique | sort | list }}"
  tags:
    - injection_docs

- name: Write injection documentation to injection_docs.json
  copy:
    dest: "injection_docs.json"
    content: "{{ injection_docs | to_nice_json }}"
  tags:
    - injection_docs
